{"version":3,"file":"brick.js","sources":["webpack://[name]/webpack/universalModuleDefinition","webpack://[name]/./core/compile.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"$\"), require(\"lodash\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"$\", \"lodash\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"brick\"] = factory(require(\"$\"), require(\"lodash\"));\n\telse\n\t\troot[\"brick\"] = factory(root[\"$\"], root[\"_\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__, __WEBPACK_EXTERNAL_MODULE__3__) {\nreturn ","/*!\n * Created by julien.zhang on 2014/12/9.\n */\n\nimport $ from 'jquery'\nimport _ from 'lodash'\nimport directives from './directives.js'\n\n/**\n * 编译dom节点\n * @param node  {HTMLElement | jQuery}\n * @param is_start_form_children  {Boolean} 可选,  true 表示直接从子元素开始编译;  考虑: ic-tpl指令下, 从ic-tpl属性dom开始编译还是从子元素开始编译好?\n */\nfunction compile (node, is_start_form_children) {\n\n    let $elm = $(node);\n\n    // 含有ic-skip指令的元素不用编译\n    if($elm[0].hasAttribute('ic-skip')) return console.log('ic-skip:', node);\n\n    !is_start_form_children && __compile(node);\n\n    let $children = $elm.children();\n    let child;\n    let i = 0;\n    while (child = $children.eq(i)[0]) {\n        i++;\n        compile(child);\n    }\n}\n\n\nfunction __compile (node) {\n\n    node = node.nodeType ? node : node[0];  // jquery对象转为dom对象\n    if (node.nodeType !== 1) return console.info('compile exit', node);\n\n    let $elm = $(node);\n    let attrs = node.attributes;\n\n    let _directives = [];\n\n    let priority = {\n        'ic-ctrl': -1000\n    };\n\n    let j = 0;\n    _.each(directives.get(), function (v, i, list) {\n\n        if (typeof v === 'object' && v.priority) {\n            priority[i] = v.priority;\n            return;\n        }\n        priority[i] = j++;\n\n    });\n\n\n    let name;\n\n    for (let i = 0, l = attrs.length; i < l; i++) {\n\n        name = attrs[i].name;\n\n        if (directives.get(name)) {\n            _directives.push(name);\n            continue;\n        }\n\n    }\n\n    //对指令按优先级排序\n    _directives.sort(function (a, b) {\n        return priority[a] - priority[b];\n    });\n\n    //处理每一个指令\n    while (name = _directives.shift()) {\n        directives.exec(name, $elm, attrs);\n    }\n\n}\n\n\nexport default compile\n\n"],"mappings":";;;;;;AAAA;;;ACoFA","sourceRoot":""}